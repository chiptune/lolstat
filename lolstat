#!/usr/bin/env bash

#.o+°"°+o._.o+° 
#             / 
#   LOL STAT  > 
#             \ 
#.o+°"°+o._.o+°`

# https://github.com/chiptune/lolstat

ver="0.4.7"

tmp="/dev/shm/lolstat-" # tmp file path
timer=2           # use i3status.conf interval
tmax=2            # max time for curl call
tout=2            # curl connection timeout

s0=" "            # space
s1="\u00c2${s0}"  # separator
l0="\u00c5"       # led off
l1="\u00c6"       # led on
b0="\u00c0"       # bar empty
b1="\u00c1"       # bar full
disk="\u00b8"     # floppy disk
note="\u00cd"     # music note
dead="\u2620"     # he's dead jim
ok="\u263a"       # ok status
nok="\u2639"      # not ok status
arw="\u00c4"      # arrow

# cmd 2>/dev/null # send output to hell

n=$(($(cat "${tmp}count" 2>/dev/null)))
if [ ${n} -eq 0 ]; then n=0; fi
if [ ${n} -eq 150 ]; then n=0; fi
echo $((n+1)) > "${tmp}count"

ts=$(date "+%s%N")
ts_p=$(cut -d ' ' -f 1 < "${tmp}time")
if [ "${ts_p}" -eq 0 ]; then ts_p=${ts}; ts=$((ts+1000000)); fi
echo -ne "${ts} ${ts_p}" > "${tmp}time"
t=$(mawk '{printf "%.*f",3,$1/1000000000}' <<< $((ts-ts_p)))

if [ -f "${tmp}ver" ]; then
  if [ "${ver}" != "$(< "${tmp}ver")" ]; then rm "${tmp}"*; fi
else
  echo "${ver}" > ${tmp}'ver'
fi

if [ ${n} -eq 0 ]; then
  if [ "$(which curl)" ]; then
    curl -o "${tmp}ip" -s "http://ipecho.net/plain"\
    -m ${tmax} --connect-timeout ${tout}
    curl -o "${tmp}geo" -s "https://freegeoip.net/json/$(cat "${tmp}ip")"\
    -m ${tmax} --connect-timeout ${tout}
  fi
fi

function bar()
  {
  val=$((10#${1} + 1))
  if [ "${2}" ]; then n=${2}; else n=10; fi
  bar=""
  i=0
  while [ $i -lt 100 ]
  do
    if [ "$((${val}-50/n+1))" -gt $i ]; then
      bar="${bar}${b1}";
    else
      bar="${bar}${b0}";
    fi
    i=$((i+100/n))
  done
  echo -ne "${bar}${1}%"
  }

function upd() # countdown to next update
  {
  echo -ne "$(printf '%03d' $(((150-n)*timer)))${s0}"
  }

function disk()
  {
  data=$(df 2>/dev/null | grep -m 1 -E "\ ${1}$")
  if [ -n "${data}" ]; then
    echo -ne "${2}$(mawk '{FS=" "}{printf "%.*f",1,100/($3+$4)*$3}' <<< "${data}")%${s0}"
  fi
  }

function io()
  {
  dev=$(lsblk | sed -n "$((1+$1))p" | cut -d ' ' -f 1)
  if [ -r "/sys/block/${dev}/stat" ]; then
    if [ ${n} -eq 0 ]; then mawk '{print $3,$7}' < "/sys/block/${dev}/stat" > "${tmp}io"; fi
    data=$(mawk '{print $3,$7}' < "/sys/block/${dev}/stat")" "$(mawk '{print $1,$2}' < "${tmp}io");
    echo "${data}" > "${tmp}io"
    bs=$(cat "/sys/block/${dev}/queue/physical_block_size") #sudo dd if=/dev/sda1 of=/dev/null count=1
    io=$(mawk 'BEGIN{FS=" ";r='"${bs}"'/1024/'"${t}"'}{printf "%s%03d'"${s0}"'%s%03d",($1-$3<r)?"'"${l0}"'":"'"${l1}"'",($1-$3)*r,($2-$4<r)?"'"${l0}"'":"'"${l1}"'",($2-$4)*r}' <<< "${data}")
  else
    io="?"
  fi
  if [ "${2}" -eq 1 ]; then
    echo -ne "IO${arw}${dev}${s0}";
  fi
  echo -ne "${io}${s0}"
  }

function cpu()
  {
  # user nice system idle iowait irq softirq
  data=$(mawk '/cpu\ /{printf "%.*f %.*f",0,$2+$3+$4,0,$2+$3+$4+$5}' < /proc/stat)' '$(mawk '{print $1,$2}' < "${tmp}cpu")
  echo -ne "${data}" > "${tmp}cpu"
  cpu=$(mawk 'BEGIN{FS=" "}{printf "%02d",100/($2-$4)*($1-$3)}' <<< "${data}")
  echo -ne "CPU${arw}"
  if [ "${1}" -eq 1 ]; then
    freq=$(lscpu | mawk '/CPU\ MHz/{printf "%04dMHz",$NF}')
    echo -ne "${freq}${s0}$(bar "${cpu}" 5)${s0}"
  else
    echo -ne "$(bar "${cpu}")${s0}"
  fi
  }

function ram()
  {
  total=$(mawk '/MemTotal/{print $2}' /proc/meminfo)
  free=$(mawk '/MemFree/{print $2}' /proc/meminfo)
  echo -ne "RAM${arw}"
  if [ "${1}" -eq 1 ]; then
    ram=$(mawk 'BEGIN{FS=" "}{printf "%02d",100/$1*($1-$2)}' <<< "${total} ${free}")
    echo -ne "$(((total-free)/1024))Mb${s0}$(bar "${ram}" 5)${s0}"
  else
    echo -ne "$(bar "${ram}")${s0}"
  fi
  }

function netw()
  {
  if [ ${n} -eq 0 ]; then
    rm "${tmp}netw" 2>/dev/null
    /sbin/ifconfig -s | tail -n +2 | cut -d ' ' -f 1 | while read -r i;
    do
      data=$(/sbin/ifconfig "${i}" | tail -n +2)
      ip=$(echo "${data}" | grep "inet\ " | mawk '{print $2}')
      if [ "${ip}" = "127.0.0.1" ]; then continue; fi
      echo -e "${i} ${ip}" >> "${tmp}netw"
      rx=$(cat "/sys/class/net/${i}/statistics/rx_bytes")
      tx=$(cat "/sys/class/net/${i}/statistics/tx_bytes")
      echo -ne "${rx} ${tx}" > "${tmp}netw-${i}"
    done
  fi
  while read -r i;
  do
    nw=$(echo "$i" | cut -d ' ' -f 1)
    ip=$(echo "$i" | cut -d ' ' -f 2)
    rx=$(cat "/sys/class/net/${nw}/statistics/rx_bytes")
    tx=$(cat "/sys/class/net/${nw}/statistics/tx_bytes")
    rt_dat="${rx} ${tx} $(mawk '{print $1,$2}' < "${tmp}netw-${nw}")"
    echo -ne "${rt_dat}" > "${tmp}netw-${nw}"
    rt=$(mawk 'BEGIN{FS=" ";r=1024*'"${t}"'}{printf "%s%05.*f %s%05.*f",($1==$3)?"'"${l0}"'":"'"${l1}"'",1,($1-$3)/r,($2==$4)?"'"${l0}"'":"'"${l1}"'",1,($2-$4)/r}' <<< "${rt_dat}")
    data=$(/sbin/iwconfig "${nw}" 2>/dev/null)
    if [ -z "${data}" ]; then
      echo -ne "${s1}${nw}${arw}${ip}${s0}${rt}${s0}"
    else
      q=$(sed -ne 's/.*Link\ Quality="*\([^ ]*\).*/\1/p' <<< "${data}" | mawk 'BEGIN{FS="/"}{printf "%02d",100/$2*$1}')
      #br=$(printf "%02dMb/s" "$(sed -ne 's/.*Bit\ Rate="*\([^ ]*\).*/\1/p' <<< "${data}")") # Mb/s
      #ssid=$(sed -ne 's/.*ESSID:"*\([^ ]*\).*"\ \ /\1/p' <<< "${data}")
      echo -ne "${s1}${nw}${arw}$(bar "${q}" 5)${s0}${rt}${s0}" # ${ssid}~
    fi
  done < "${tmp}netw"
  }

function url()
  {
  if [ ${n} -eq 0 ]; then
    ping -c1 "${1}" | mawk '/time\=/{print $(NF-1)}' | sed -e 's/time=//' > "${tmp}ping-${1}"
  fi
  time=$(cat "${tmp}ping-${1}" 2>/dev/null)
  name=${1}; if [ "${2}" ]; then name=${2}; fi
  if [ "${time}" == "" ]; then
    time="${dead}"
  else
    time=$(mawk '{printf "%s%04.*f",($1<100)?"'${ok}'":"'${nok}'",2,$1/1000}' <<< "${time}")
  fi
  echo -ne "${name}${s0}${time}${s0}"
  }

function weather()
  {
  if [ ${n} -eq 0 ]; then
    coord=$(cat "${tmp}geo")
    if [ "${coord}" ]; then
      lat=$(echo -ne "${coord}" | sed -e 's/.*"latitude":\([^,]*\).*/\1/')
      lon=$(echo -ne "${coord}" | sed -e 's/.*"longitude":\([^,]*\).*/\1/')
      data=$(curl -s "http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&APPID=c8236a643beb666d2042d55869b69258" -m "${tmax}" --connect-timeout "${tout}")
      if [ "${data}" ]; then
        temp=$(echo -ne "${data}" | sed -ne 's/.*"temp":"*\([^ ]*\).*",/\1/p' | mawk '{printf "%02.*f",1,$1}')
        code=$(echo -ne "${data}" | sed -e 's/.*"icon":"\([^"]*\).*/\1/')
        case "${code}" in
          "01d"|"01n") icon="\u00d2";; # clear sky
          "02d"|"02n") icon="\u00d3";; # few clouds
          "03d"|"03n") icon="\u00d4";; # scattered clouds
          "04d"|"04n") icon="\u00d5";; # broken clouds
          "09d"|"09n") icon="\u00d6";; # shower rain
          "10d"|"10n") icon="\u00d7";; # rain
          "11d"|"11n") icon="\u00d8";; # thunderstorm
          "13d"|"13n") icon="\u00d9";; # snow
          "50d"|"50n") icon="\u00da";; # mist
        esac
        echo "${icon}${temp}°" > "${tmp}weather"
      fi
    fi
  fi
  echo -ne "$(cat "${tmp}weather" 2>/dev/null)${s0}"
  }

function clock()
  {
  echo -ne "$(date "+%d.%m${s0}%H:%M")${s0}" # \u231a${s0}
  }

function window()
  {
  id=$(xprop -root 2>/dev/null | awk '/_NET_ACTIVE_WINDOW\(WINDOW\)/ {print $NF}')
  xprop -id "${id}" | mawk '/WM_NAME\(STRING\)/{$1=$2="";print}' | cut -d '"' -f 2
  }

function term()
  {
  id=$(xprop -root 2>/dev/null | awk '/_NET_ACTIVE_WINDOW\(WINDOW\)/ {print $NF}')
  pid=$(xprop -id "${id}" | awk '/_NET_WM_PID\(CARDINAL\)/{print $NF}')
  size=$(stty size < /dev/"$(ps --ppid "${pid}" -o tty | tail -n 1)")
  echo -ne "${pid}=$(echo "${size}" | cut -d ' ' -f 2)*$(echo "${size}" | cut -d ' ' -f 1)${s0}"
  }

function power()
  {
  if [ "$(which acpi)" ]; then
    if [ ${n} -eq 0 ]; then
      acpi -V | head -1 | cut -d ',' -f 2 | sed -e 's/%//' > "${tmp}power";
    fi
    power=$(($(cat "${tmp}power" 2>/dev/null)))
    v=$((199+power/20))
    icon="\u00$(printf '%x' ${v})"
    echo -ne "${icon}${power}%${s0}"
  fi
  }

function mixer()
  {
  # TODO: replace by "--" if mute
  if [ "$(which amixer)" ]; then
    if [ "${2}" ]; then card=${2}; else card=0; fi
    lvl=$(amixer -c "${card}" get "${1}" | tail -1 | cut -d '[' -f 2 | cut -d '%' -f 1)
    if [ -n "${lvl}" ]; then
      echo -ne "${note}$(mawk 'BEGIN{printf "%02d",'"${lvl}"'}')%${s0}";
    fi
  fi
  }

# my current setup
out="\
$(disk "/" "/")\
$(disk "/home" "~")\
$(disk "/cloud" "${disk}")\
$(disk "/data" "${disk}")\
${s1}\
$(io 1 0)\
${s1}\
$(cpu 0)\
$(ram 1)\
$(netw 1)\
${s1}\
$(clock)\
$(weather)\
${s1}\
$(power)\
$(mixer "Speaker" 1)\
"
#$(term)${s0}\
#${USER}${s0}\
#$(url "lol.pm" "lol")${s0}\

echo -ne "${out::-1}"

exit
